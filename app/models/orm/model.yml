# Furnace Application ORM Model File
# ---------------------------------------------------------------------------
# + Defining an Object
# Objects are defined by a ProperCased string of text beginning at the start
# of a line and ending with a colon (:).
# 
# + Adding metadata to an object
# ===============================
# Object metadata is defined by indenting two (2) spaces from the start of a 
# line and specifying one of the supported metadata keys, folowed by a 
# colon (:):
#     _description: a short textual description of the object
#     _table:       the RDBMS table used to persist instances of the object
#
# + Adding Relations to an Object
# =============================== 
# Object relations are defined by indenting two (2) spaces from the start of
# a line and specifying one of the supported relation types, followed by a
# colon (:):
#     _belongsTo:   defines a M-1 relation between this object and another
#     _hasMany:     defines a 1-M or M-M relation between two objects
# The right-hand side of the definition depends on which type of relation
# was specified. 
#
# + _belongsTo Relations
# ----------------------
# For _belongsTo relations, the right hand side can look 
# like any of the following:
#     Object                     - The name of the remote (foreign) object
#     Object["name"]             - An alias to use as the name for this relation
# Additional commands can be appended to the right hand side using a semicolon
# (;) as a separator. The supported commands for _belongsTo relations are:
#     ;required                  - Specifies that the relation MUST exist for each instance
#     ;reciprocal='@@@'          - Specifies a 'Has Many' relation on the foreign object 
#                                  that reciprocates this relation
# + _hasMany Relations
# --------------------
# For _hasMany relations, the right hand side can look like any of the 
# following:
#     Object                     - The name of the remote (foreign) object
#     Object["name"]             - An alias to use as the name for this relation
#     Object["name"|"recipName"] - An alias to use as the name for this relation and its reciprocal
# Additional commands can be appended to the right hand side using a semicolon
# (;) as a separator. The supported commands for _hasMany relations are:
#     ;via=Intermediate          - An intermediate (lookup) object to use for M-M relations  
#      
# + Adding Attributes to an Object
# --------------------------------
# Object attributes are specified by indenting two (2) spaces from the start of
# a line and specifying the camelCased attribute name, followed by a colon (:).
# The right hand side of the declaration contains the Furnace type for the attribute
# (e.g.: string,integer,float,text,etc).
# 
# Additional commands can be appended to the right hand side using a semicolon
# (;) as a separator. The supported commands for object attributes are:
#     ;primary                   - If present, marks the attribute as a primary key
#     ;autoincrement             - If present, marks the attribute as auto-incrementing
#     ;max=###                   - For strings, specifies a maximum length <255 characters
#     ;description="@@@"         - Stores a brief textual description of the attribute
#
# 
# Example:
#
#Blog:
#  _table: blog
#  _description: "A collection of short posts by a single author"
#  _hasMany: BlogPost['posts']
#  _belongsTo: User['owner'];required
#  id: integer;primary;autoincrement
#  name: string;max=60;description='A name for this blog'
#  lastPostDate: timestamp;description='The last time this blog was updated'
#
#BlogPost:
#  _table: blogpost
#  _description: "A single post in a blog"
#  _belongsTo: User['author'];required
#  _belongsTo: Blog;required
#  id:integer;primary;autoincrement
#  title: string;max=60;description='The title for this blog post'
#  body: text;description='the content of this blog post'
#  created: timestamp;description='When this blog post was first written'
#  modified: timestamp;description='When this blog post was last updated'
#  publishAfter: timestamp;description='When this blog post will first be visible'
#
#User:
#  _table: user
#  _description: "User accounts"
#  id:integer;primary;autoincrement
#  _hasMany: Blog['blogs']
#  username:string;max=25
#  password:string;max=25
#  mail:string;max=80
#
#
# + Assumptions
# ===========================================================================
# For convenience a number of assumptions are made by the model parser. They
# are outlined as follows:
#
#    0) If no _table element exists, the table name will be assumed to be
#       the camelCased version of the object name. (e.g.: PhotoGallery will
#       be assigned a table `photoGallery` unless a _table element specifies
#       an override).
#
#    1) If no attribute is marked 'primary', the parser will generate a
#       primary key attr/column for the object using `<objectname>Id` as 
#       a template. The generated field will be an integer, and will 
#       autoincrement. To override this behavior, simply mark one of your
#       existing attributes with the `;primary` command.
#
#    2) All "Has Many" relations have an implicit, reciprocal "Belongs To"
#       relation. This is needed in order to be able to store the relation
#       as a foreign 1-M foreign key. The parser makes the following
#       assumptions:
#         a) If there is no reciprocating relation, parsing will fail.
#         b) If there is exactly one suitable reciprocating relation,
#            it will be used as the reciprocal for the "Has Many"
#         c) If more than one relation could be used, the parser will 
#            choose the one where ;reciprocal=@@@ matches the name of the
#            "Has Many" relation on the foreign object. If none have the
#            ;reciprocal=@@@ command, parsing will fail.
#
#    3) All "Belongs To" relations will use the foreign object's primary key
#       as a foreign key for the relation, unless a `;key` command is found
#       specifying a key to use instead. The specified value must be marked
#       either `;primary` or `;unique` in the foreign object. If the foreign
#       object has multiple primary keys, they will all be used as foreign
#       keys. To explicitly specify multiple foreign keys, separate the values
#       to `;key` with a comma (e.g.: ;key=foo,bar).
#
#
####